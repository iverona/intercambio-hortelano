rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow public read access to products and users for browsing
    match /products/{productId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
    }

    // Secure the chats collection
    match /chats/{chatId} {
      // Allow read and update only if the user is a participant in the existing chat
      allow read, update: if request.auth != null && request.auth.uid in resource.data.participants;
      
      // Allow create if the user is authenticated and is included in the participants array
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participants;

      // Secure the messages subcollection
      match /messages/{messageId} {
        // Allow read and create only if the user is a participant in the parent chat document
        allow read, create: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        // Disallow updates and deletes to messages to maintain chat history integrity
        allow update, delete: if false;
      }
    }

    match /notifications/{notificationId} {
      // Allow read if user is authenticated
      // The query in the app already filters by recipientId
      allow read: if request.auth != null;
      // Allow create if authenticated and the notification has a valid recipientId
      allow create: if request.auth != null && 
        request.resource.data.recipientId != null;
      // Allow update only if the user is the recipient and only updating isRead field
      allow update: if request.auth != null && 
        resource.data.recipientId == request.auth.uid &&
        request.resource.data.recipientId == resource.data.recipientId &&
        request.resource.data.senderId == resource.data.senderId &&
        request.resource.data.type == resource.data.type &&
        request.resource.data.entityId == resource.data.entityId &&
        request.resource.data.createdAt == resource.data.createdAt;
      // Prevent deletes to maintain notification history
      allow delete: if false;
    }

    // Rules for exchanges collection
    match /exchanges/{exchangeId} {
      // Allow read if user is authenticated (queries will filter by requesterId/ownerId)
      allow read: if request.auth != null;
      // Allow create if authenticated
      allow create: if request.auth != null;
      // Allow update if user is the requester or owner
      allow update: if request.auth != null && 
        (resource.data.requesterId == request.auth.uid || 
         resource.data.ownerId == request.auth.uid);
      // Allow delete if user is the owner
      allow delete: if request.auth != null && 
        resource.data.ownerId == request.auth.uid;
    }
  }
}
